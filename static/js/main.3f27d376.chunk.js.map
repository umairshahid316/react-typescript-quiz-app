{"version":3,"sources":["components/QuestionCard.styles.ts","Api.tsx","components/QuestionCard.tsx","Utillies.tsx","App.styles.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","callback","userAnswer","questionNum","totalQuestions","dangerouslySetInnerHTML","__html","map","answer","correctAnswer","disabled","value","onClick","fetchQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","Total_Questions","App","useState","Loading","setLoading","questions","setQuestions","number","setNumber","setUserAnswer","score","setScore","gameOver","setGameOver","console","log","EASY","startQuiz","newQuestion","nextQuestion","length","className","undefined","e","currentTarget","prev","answerObject","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f27d376.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\r\n        : !correct && userClicked\r\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\r\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\r\n    border: 3px solid #ffffff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`;","// import { type } from \"os\";\r\n// import { QuestionCard } from \"./components/QuestionCard\";\r\nimport { shuffleArray } from './Utillies';\r\n\r\nexport const fetchQuestions = async (amount: number, difficulty: Difficulty) => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n    const data = await (await fetch(endpoint)).json();\r\n\r\n    return data.results.map((question: Question) => (\r\n\r\n        {\r\n            ...question,\r\n            answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\r\n        }\r\n\r\n    ))\r\n}\r\n\r\n\r\nexport enum Difficulty {\r\n    EASY = \"easy\",\r\n    MEDIUM = \"medium\",\r\n    HARD = \"hard\"\r\n}\r\n\r\nexport type Question = {\r\n    category: string;\r\n    correct_answer: string;\r\n    difficulty: string;\r\n    incorrect_answers: string[];\r\n    question: string;\r\n    type: string;\r\n}\r\n\r\nexport type QuestionState = Question & { answers: string[] };","import React from 'react'\r\nimport {Wrapper, ButtonWrapper} from './QuestionCard.styles';\r\n\r\ntype Props ={\r\n    question: string;\r\n    answers:string[];\r\n    callback:any;\r\n    userAnswer:any;\r\n    questionNum:number;\r\n    totalQuestions:number;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const QuestionCard: React.FC<Props> = \r\n ({question, answers, callback, userAnswer, questionNum, totalQuestions }) => {\r\n    return (\r\n        <Wrapper>\r\n    <p>Question: {questionNum} / {totalQuestions}</p>\r\n        \r\n        <p dangerouslySetInnerHTML={{__html:question}}/>\r\n\r\n    <div>\r\n     { answers.map(answer => (\r\n         <ButtonWrapper \r\n         correct={userAnswer?.correctAnswer===answer}\r\n         userClicked={userAnswer?.answer===answer}\r\n         >  \r\n             <button disabled={userAnswer} value={answer} onClick={callback}>\r\n                 <span dangerouslySetInnerHTML={{__html:answer}}/>\r\n             </button>\r\n             </ButtonWrapper>\r\n     )) }  \r\n    </div>\r\n\r\n    </Wrapper>\r\n    )\r\n}\r\n","export const shuffleArray =(array: any[])=>\r\n[...array].sort(()=>Math.random() -0.5)","import styled, { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        height: 100%;\r\n    }\r\n    body {\r\n        background-color: navy;\r\n        margin: 0;\r\n        padding: 0 20px;\r\n        display flex;\r\n        justify-content: center\r\n    }\r\n    * {\r\n        box-sizing: border-box;\r\n        font-family: 'Catamaran', sans-serif;\r\n    }\r\n`\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  > p {\r\n    color: #fff;\r\n  }\r\n  .score {\r\n    color: #fff;\r\n    font-size: 2rem;\r\n    margin: 0;\r\n  }\r\n  h1 {\r\n    font-family: Fascinate Inline;\r\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\r\n    font-weight: 400;\r\n    background-size: 100%;\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    -moz-background-clip: text;\r\n    -moz-text-fill-color: transparent;\r\n    filter: drop-shadow(2px 2px #0085a3);\r\n    font-size: 70px;\r\n    text-align: center;\r\n    margin: 20px;\r\n  }\r\n  .start, .next {\r\n    cursor: pointer;\r\n    background: linear-gradient(180deg, #ffffff, #ffcc91);\r\n    border: 2px solid #d38558;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n  }\r\n  .start {\r\n    max-width: 200px;\r\n  }\r\n`;","import React, { useState } from 'react';\nimport './App.css';\nimport { QuestionCard } from './components/QuestionCard';\nimport { fetchQuestions, Difficulty, QuestionState } from './Api'\n// import { loadavg } from 'os';\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nconst Total_Questions = 10;\n\ntype AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nfunction App() {\n\n  const [Loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswer, setUserAnswer] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  console.log(fetchQuestions(Total_Questions, Difficulty.EASY))\n\n  const startQuiz = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestion = await fetchQuestions(Total_Questions, Difficulty.EASY)\n    setQuestions(newQuestion);\n    setScore(0);\n    setUserAnswer([]);\n    setNumber(0);\n    setLoading(false);\n  }\n  const nextQuestion = async () => {\n\n    const nextQuestion = number + 1;\n    if (nextQuestion === Total_Questions) {\n      setGameOver(true);\n    }\n    else {\n      setNumber(nextQuestion);\n    }\n\n  }\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n\n      if (correct) {\n        setScore(prev => prev + 1)\n      }\n\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      }\n\n      setUserAnswer(prev => [...prev, answerObject])\n\n    }\n\n  }\n\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>Quiz</h1>\n        {gameOver || userAnswer.length === Total_Questions ? (\n          <button className=\"start\" onClick={startQuiz}>\n            Begain Quiz\n          </button>\n        ) : null}\n\n        {!gameOver ? (\n          <p className=\"score\">Score: {score}</p>\n        ) : null\n        }\n        {Loading ? (\n          <p>Loading....</p>\n        ) : null}\n\n        {!Loading && !gameOver ? (\n          <QuestionCard\n            questionNum={number + 1}\n            totalQuestions={Total_Questions}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswer ? userAnswer[number] : undefined}\n            callback={checkAnswer}\n          />) : null\n        }\n\n        {!gameOver && !Loading && userAnswer.length === number + 1 && number !== Total_Questions - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>Next</button>\n        ) : null\n        }\n      </Wrapper>\n\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}